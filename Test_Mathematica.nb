(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    190845,       3705]
NotebookOptionsPosition[    188628,       3656]
NotebookOutlinePosition[    188969,       3671]
CellTagsIndexPosition[    188926,       3668]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Hands on start to Mathematica", "Title",
 CellChangeTimes->{{3.7845538662178926`*^9, 
  3.7845538710333977`*^9}},ExpressionUUID->"89dad1f2-0810-454f-9141-\
4531f31e45e8"],

Cell[CellGroupData[{

Cell["Entering Calculations", "Section",
 CellChangeTimes->{{3.7845539510570264`*^9, 
  3.7845539536411853`*^9}},ExpressionUUID->"ee142f2b-5054-44c0-8861-\
e7ea104a2ace"],

Cell[CellGroupData[{

Cell["Free Form input", "Subsection",
 CellChangeTimes->{{3.784553985718871*^9, 
  3.784553987689767*^9}},ExpressionUUID->"2a09f734-69f8-46bf-a631-\
a528263118b2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "*", "x"}], " ", "+", " ", "2"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "5.3"}], ",", " ", "5.3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.784555789835994*^9, 3.7845557903013363`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"5888543e-a62c-47cb-9acb-e1755f73cc87"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwt1P9T03UcwPE52Pg2xr58PnxHNmDwGdCAuAtd0ueltzODAQHTRDhEDOiS
BhqkmREHpIKCgXDSlYDIEWkgRpiE9HmXUycSKgcdKyW+FYgJC2QMGlBd7x+e
9/gPntL0nIQMNovFivm3/+T3tPmFh5Pof6XIoA2bGQkhsVLUJPnmSlkwiZUi
ZUmXclxGYqUoK1r3eqUriZUiZDAcm1slsBL0rsl66LKewErQcEjyx36pBFaC
Mi7mCQMPi1Hv9ic+mtmN6Eijr0tBvQgZVa8qLK94IX8NJ8CxT4jULfax7rUe
6BxXk97+hwApHFt0aT+5oQrVJpdGgQB5luYqVFJXVMUVz8XF87HOKPKJu+5h
KQ9LoMXxmNPGUXusCIWP7LkcQdhhhajAWNXjkWmDLKOyDyL6+GgtK3QyH3GQ
5X6a/mmhA7Ie+2Kf2WSFbH+Mu2l8ZoOcD0YNuKjZKHi8uimk1hpdYd/5dO+H
LJTKqQhnVlhoeT7+qVK7ysz/fvHn/EcrTBs/u9S4cYVJ8RoWjUU+Z3JeUA6Z
TpiYG53Tml+9Z5jXjqbaRCgWmB0DC8rrBw3M3up3+s+4zTGSvJgXuf1f0ev6
jt9KzVMMW1sLf/JH6YGk5p6l+DEmRd1RIkh5Rh8b2zDruGmQ2ea0brs8sUiP
b6Sn46y7GT9PM/u9egt98sKjPUP6Ltq1t3Vn+ecbIJrXZnxZN0iLi4Ms/DAO
THs0H2kVjNHPHRNv7DppC5VB5ec/i52m9TW3+2MCeJDZPJJ79e05Ojwx5/ru
TicoGf+hW85doLf9NfqYKBbCXW2a8FKdiX4zot12Z5wYFvtaCo3Ly/TRTA2Y
LQRcS/O/E6VapZNDz+6XNTpDp3kpJPAAC+sKVpfC7KpINtYd7iVVnno4YYX1
gOPzt9zzznKwXsDzr6lpUNpgvYG3u6yriWMH3OBbKQNFElg/pJlx+NoeCjcH
LnKSpJB9WqWLKuLBS9t90mVbfaAJ7peKo/iQ0DCls5P5woPHihR6wQmmtS5t
9cu+0L3llwPSUQHWD2w/smnXfCvEyuA7PntGXSbC+sOX58+YQ3PE2AAQXThR
fltFYCkoipykC3cQWArmDTC/WU1gKRgQrexqTSSwFFSVZEuq0wksBcK34jv2
FRJYCgQhHgZLN4GloPDe4VPXGAJLgTFrMDL3JoGl4EFDeeNEL4Gl4BMRK7vX
QGApcDJNrp1bIrAUFFRtvRr/N4GlYFZRt99hncBS0J/1hr6AS2LlUGG4W5lB
klg5rOX7q7zdSKwctKJi07AniZVDbPSWZLUfiZXD91O1jlyKxMpBUbLIMEEk
Vg51koRD74eQWDngf2Hl8A/aUC94
       "]]},
     Annotation[#, "Charting`Private`Tag$6587#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5.3, 5.3}, {-8.599999567346938, 12.599999567346938`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.784554573720929*^9, 3.7845557919292765`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"9b878f1e-adae-4239-a68f-3f3c76726da8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "integral of cos(2x)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", "Integrate[Cos[2*x], x]"}, 
      "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Cos[2 x], x]"}], 
       XMLElement["moutput", {}, {"Cos[x] Sin[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Cos[x] Sin[x], {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5463$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5462$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5462$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5463$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3122176$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5462$\
3122181$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5463$3122182$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5463$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5462$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3122176$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5462$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5462$\
3122181$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5463$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5463$\
3122182$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3122154[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Cos[$CellContext`x] Sin[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5462$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5462$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5462$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5463$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min5462$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5463$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5462$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max5463$$]], 
                    6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5462$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5463$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3122154]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3122154[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[CalculateUtilities`GraphicsUtilities`Private`lines, 
                    Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pt, 1, 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3122154[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === L\
ength[CalculateUtilities`GraphicsUtilities`Private`intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfjP4D5B4RmqH9oYEdDAmDShJea+\
XXBIL1w62sw3+efDZTdKsXaWYDtCUPpzqS/\
P57rvvrvfsRARJv9frqZvGfBAsTnbw9NSYsZjnouDxu/\
NcglJU8OQGPrtnTAj6ABj5AbHz3TbmvZBzot35Fb5PWFQwouGrpoxqCmp2KEme0UjVnomkp+\
YnMyYiwuhPeL43HI2G+/\
sOBmOZEK1BcrXXFjLPJFGQ9BDoljFvGeHf3PFJefxUMBbC9wJ4BOqx8U4liQ2M4IRhPt63Xm+\
mHmBimvCYyPjKabLyHLe9QGlJeTqFeY5vXE7WsC0wkaly3DwsudmkIBf+\
HXwgQhuT89ik7dkS6BfGNaPvoqz+OXcDPL9uCy/\
F2XriML83DHkjmp6CWqXzRes6OUaqrrXRL7i6qvmy1SAvnzL1/9IxVXo1jFHbMGB+Ymq8Xnur8C/\
bwoscu34h7kfGfHaOEnDdcKgE91HEBVtE0Ux54CTaPl2VG4fDuF/\
xHaLTp4IVTmDiLPvF9sduBV5vCiHWbrYF6fB6BgSQg3HFltsDmlI9zogkkQFeXNcvm2wq6lA87mxfe\
8pjagaYI2TT8oTmKFmqO9FR9uWPilvJ5UKTIe9HXEMKcqPo72J9pCGXx1PhGUmIFzT16s1hldSESG/\
ZD0qQMCecIiT9ZT72m3u4XAmk6lCiuqRjcWBLc+\
6fRL8s8DHwVGfNHdtzdHm3LWYTiLNadQFNkuVpsz2m+02mGzc0B7ovCb4l8R/o3abQbQp/\
dVNY2YO7NaFbE7o1oVsTujXh/10TbMT4r/QbCPa4Rg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Cos[x] Sin[x], {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5465$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5464$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5464$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5465$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3122270$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5464$\
3122271$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5465$3122272$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5465$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5464$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3122270$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5464$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5464$\
3122271$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5465$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5465$\
3122272$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3122250[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Cos[$CellContext`x] Sin[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5464$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5464$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5464$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5465$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min5464$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5465$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5464$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max5465$$]], 
                    26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5464$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5465$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3122250]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3122250[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3122250[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMWIf4hgR0MCYNKEn5Xi++NBauHWxnG/\
x58NlN0qxdpZgO0JR+ONWX5vHdc89d78mRjNJ+r9fTV635IDlNb+DpsTUjOc9lIei701yB1kyK9Ao+\
u21NDGYPOPkB1PuuW/Neqjkx/vwK3yc8KTgx8NUwzgwDPd1XJM9YomvPWLFj+\
5Mplwnh7Cc83d0ZDocvn3sYjGVMjAEl9G5byDxTREPaQ6Br1rzlRHzzx0fl8VPBeQzfCxAJ6AfWO1G\
EWhgpCMd8gm+93EzdxcQMEZQoeuE0OXmO2l6gjWJiNoF5jm+cT9ZOW2CiZtpzc6/\
kZpOCfPg38YGMXUze45J2Z0dgWBiXjL6zsvrn3A3w/LotvJIn64nD/\
N5w5I0Ydgx6lc5nrevkGam61kW/4Oqi5stWgzx/ytT/S4dMm9Uwhm3DgPmRrfF67a3Cv2gLL3Ps+\
oW471vz2TtKwHXDoRLcR0kLvoiimfLAS7R9ujq3Do9xp+\
I7RmdIBSucyMZZ9ovrj4cVeL0pxFi76RakI+\
oZEEEO1kUdt3tsxswoI4okFnhxXb9ssomsQwm4s33tmaDMDjBPyKblCc1BulR3YpLsyx8Vt5LLmSZD\
3g+EgRmojaK/hfVRllxBJzIwkhgvaOo1mMMqqTFRwbIflCBxTgRDSPbLftw3/3C5EkjVvkJ1Kc/\
iwJXmNDyJflngQxAzkzV37MDRFdy2mE0kT2rVRSxNl6fN9pjuN5lu3NAc6KEkhJYkfKB3m0K3KfzVT\
WFlD+7WhG5N6NaEbk3o1oT/d01wEeO/0m+oCrge"]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "2DMathPlot"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "2DMathPlot"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigReduce[Cos[x] Sin[x]]"}], 
       XMLElement["moutput", {}, {"Sin[2 x]/2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   FractionBox["1", "2"], " ", 
                   RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[Cos[x] Sin[x]]"}], 
       XMLElement["moutput", {}, {"(I/4)/E^((2 I) x) - (I/4) E^((2 I) x)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "4"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "x"}]]}], 
                   "-", 
                   RowBox[{
                    FractionBox["1", "4"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "x"}]]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = 0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[Cos[x] Sin[x], {x, 0, 4}]"}], 
       XMLElement[
       "moutput", {}, {"SeriesData[x, 0, {1, 0, -2/3, 0, 2/15}, 1, 6, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"x", "-", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    SuperscriptBox["x", "3"]}], "3"], "+", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    SuperscriptBox["x", "5"]}], "15"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 1, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["2", "3"]}], ",", "0", ",", 
                    FractionBox["2", "15"]}], "}"}], ",", "1", ",", "6", ",", 
                    "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "DefiniteIntegral", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Cos[2 x], {x, 0, Pi/4}]"}], 
       XMLElement["moutput", {}, {"1/2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox["\[Pi]", "4"]], 
                 RowBox[{
                   RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "2"], Identity], "\[LongEqual]", 
              TagBox["0.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Definite integral mean square", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralMeanSquare", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Cos[2 x]^2/Pi, {x, 0, Pi}]"}], 
       XMLElement["moutput", {}, {"1/2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", 
                    RowBox[{"2", " ", "x"}], ")"}], "\[Pi]"], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "2"], Identity], "\[LongEqual]", 
              TagBox["0.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.571", 
    "parsetiming" -> "0.521", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP14591i06c4ef2f214cc9000014a7543haadc3b73", "host" -> 
    "https://www4c.wolframalpha.com", "server" -> "10", "related" -> 
    "https://www4c.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa14601i06c4ef2f214cc900006a7a8b55ifi6bb9e6624114026840709468", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 0., 
    "Date" -> {2019, 12, 5, 17, 31, 2.9099921`8.216466793676691}, "Line" -> 
    13, "SessionID" -> 32984853250305995672}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "Integrate[Cos[2*x], x]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "integral of cos(2x)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{170., {30., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"212ab57e-3ca6-4915-8259-9e85197938a2"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{"Sin", "[", 
   RowBox[{"2", " ", "x"}], "]"}]}]], "Output",
 CellChangeTimes->{3.7845558312912817`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"8dfcc603-39bd-48e6-90a1-55bce000d0eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", " ", "x"}], "]"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[13]:=",ExpressionUUID->"24afd592-5723-41c9-9ad5-a55e356e5372"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cos", "[", "x", "]"}], " ", 
  RowBox[{"Sin", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.7845559272904716`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"680aaac2-a34f-4e03-b1ad-928cf25ccfd5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], " ", 
    RowBox[{"Sin", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "26.389378290154262`"}], ",", "26.389378290154262`"}], 
    "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[14]:=",ExpressionUUID->"71459372-9d1e-4446-8f4c-5e7060c4e829"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
M7W4DeUGHjolmKQEelJ2FeLJHcgqqPXu9TQlCE94ZbrpaheKDa4cNytSAr/G
mtWw+A9IODTlzmi3EtyeNUsnMwyg6lDe1ybDSmAfI3OrvmcAudyMJp4RSjCm
GdfxJWUQPQ27quP9XQlKFO3D9bcPI7Pw7679q0ow8TZZdaFnGM2E/3fbgFEZ
doofqxIIHUGqkcdpTFuVgbfU9ORaxyjqjvzA8Z+IMsQOsuxwot+PfaMstbuk
laHv/EPRq3/GkMCtOhctFWXIrGF9qBBNRhW3DKKTtZVBesdQryk3BR2PLi1b
36kMY6Q85Zw7FPQnWpF6ykwZEtXsxVQZqAjuCGup2ivDu2+MiYr9VDRxJ945
wUUZ7O4YM7uRaCjyLsetn2eVoX+scfFgJA0p3gt96eStDB2h3xgGe2mo/d4q
uc5fGfRDNHbQBAnkFXORTf6GMtwup947bkugLbGfSXdvKUPT+1PftSMIVBZ7
0ul7nDJkr5TvPV1MoCNxI5H2Kcqw2K//c7iH7tdxh0qrs5ThfvDXprufCfQo
vnVMIk8Zht7/m/VfpfMyAVgjXyrDDbdHDA/ovk1LqNSYq1KGNLKMwCe6j4fe
JzkebFAG9qudqW5LBJJOfBHxql0ZXt5zC9w+TqDGRMmS7f3KUNjygImjkUDu
SSmjIWRl2Jj2nNfPJFDD9fGJqkllaHkgIVrkRyCxU4pflufp7SPNt38wJpD/
3osrGsvKkHe7cKKYgUAf1Co3PNaVQUlWMNuhhoaUBRg4cllUwPHT7OuJCzQU
8Xsv30cuFYitdUt2FaYh2niciJigChg/lp6drKYig5ZhmWM7VEC1RN79rj0V
3S+SULsvR68ZD074fKagL4nuel1qKtD3Z6dh8SUKyjr5y3KPiQpwGNhxVlwi
o98W6HCIhQrwCEnsfv95DB1Ru+VUZaMCA7zsFS+PjqFNv4W8NU6oQMv83u7u
HaPIbdw1wMNdBbKsc3YeChhB75pzQ3N8VEB6Gp073j6M/BL1EkVDVWDvKFPJ
a5chNKZ6tJL9iQoUjWkVcaJ+pMOfUW+ap0K//1eZiHv0odi1qfbglyowOh8a
YBvfi0ybr1CX6lUg19BuF3NGDyo48YBpfEIFIk2iusGgFbFZUDlF51Xo/nS1
8t6BZnRSVU7w6JIKbKgxT/9wbkQCa68UOplVQTtNhn+bVx0Kuj9gXSmrComn
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
bT9a7kw1LD5jBM0REoXyPX3ofwLCzvo=
       "]]},
     Annotation[#, "Charting`Private`Tag$9335#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-26.389378290154262`, 
   26.389378290154262`}, {-0.4999987436569428, 0.4999999830174731}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7845559612904596`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"b1ae81c7-ed60-4cda-a2aa-53b423924f22"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "the number of turkeys in Turkey", 
   Typeset`newq$$ = "the number of turkeys in Turkey", Typeset`chosen$$ = 
   "Entity[\"Country\", \"Turkey\"][EntityProperty[\"Country\", \
\"LivestockPopulation\", {\"FAOLivestockType\" -> \"Turkeys\"}]]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "the number of turkeys in Turkey", 
                  Defer[
                   Entity["Country", "Turkey"][
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                   "Entity"], "[", 
                  InterpretationBox[
                   
                   DynamicModuleBox[{EntityFramework`Formatting`Private`open =
                     False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                   EntityProperty[
                   "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                   SelectWithContents->True], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                   "Entity"], "[", 
                  InterpretationBox[
                   
                   DynamicModuleBox[{EntityFramework`Formatting`Private`open =
                     False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                   EntityProperty[
                   "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                   SelectWithContents->True], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}], SelectWithContents -> 
                    True], "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "the number of turkeys in Turkey", 
                    Defer[
                    Entity["Country", "Turkey"][
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                    SelectWithContents->True], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                    SelectWithContents->True], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}], SelectWithContents -> 
                    True], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[16]:=",ExpressionUUID->"8c33330f-92e7-4db2-b57e-6e5eb8eae786"],

Cell[BoxData["3.183`3.*^6"], "Output",
 CellChangeTimes->{{3.784555982956007*^9, 3.784555995258549*^9}},
 CellLabel->"Out[16]=",ExpressionUUID->"ff874063-938b-4a20-9966-e8b5b9510b8b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Wolfram Language", "Subsection",
 CellChangeTimes->{{3.7845540181158047`*^9, 
  3.7845540212179976`*^9}},ExpressionUUID->"aadd733a-965c-40fd-adb6-\
853882f39b35"],

Cell["Capital letters to start all function names", "ItemNumbered",
 CellChangeTimes->{{3.78455606857757*^9, 
  3.7845560734903755`*^9}},ExpressionUUID->"37a4e07e-d7e7-4d11-9ffd-\
6b05d8c73cbf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pallettes", "Subsection",
 CellChangeTimes->{{3.784554024441141*^9, 
  3.784554025555501*^9}},ExpressionUUID->"607a8b68-c204-4e2c-a8e4-\
bd9c71427105"],

Cell["This is some text", "Text",
 CellChangeTimes->{{3.784554365081069*^9, 
  3.7845543674327164`*^9}},ExpressionUUID->"5cfb29bd-195e-4dbb-8cbf-\
5dcde9863859"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1904, 997},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 176, 3, 96, "Title",ExpressionUUID->"89dad1f2-0810-454f-9141-4531f31e45e8"],
Cell[CellGroupData[{
Cell[781, 29, 170, 3, 67, "Section",ExpressionUUID->"ee142f2b-5054-44c0-8861-e7ea104a2ace"],
Cell[CellGroupData[{
Cell[976, 36, 163, 3, 53, "Subsection",ExpressionUUID->"2a09f734-69f8-46bf-a631-a528263118b2"],
Cell[CellGroupData[{
Cell[1164, 43, 385, 9, 28, "Input",ExpressionUUID->"5888543e-a62c-47cb-9acb-e1755f73cc87"],
Cell[1552, 54, 2926, 65, 240, "Output",ExpressionUUID->"9b878f1e-adae-4239-a68f-3f3c76726da8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4515, 124, 113141, 2158, 66, "WolframAlphaShortInput",ExpressionUUID->"212ab57e-3ca6-4915-8259-9e85197938a2"],
Cell[117659, 2284, 248, 6, 55, "Output",ExpressionUUID->"8dfcc603-39bd-48e6-90a1-55bce000d0eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117944, 2295, 262, 7, 51, "Input",ExpressionUUID->"24afd592-5723-41c9-9ad5-a55e356e5372"],
Cell[118209, 2304, 233, 5, 32, "Output",ExpressionUUID->"680aaac2-a34f-4e03-b1ad-928cf25ccfd5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[118479, 2314, 389, 11, 28, "Input",ExpressionUUID->"71459372-9d1e-4446-8f4c-5e7060c4e829"],
Cell[118871, 2327, 44668, 750, 240, "Output",ExpressionUUID->"b1ae81c7-ed60-4cda-a2aa-53b423924f22"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163576, 3082, 24054, 538, 79, "WolframAlphaShortInput",ExpressionUUID->"8c33330f-92e7-4db2-b57e-6e5eb8eae786"],
Cell[187633, 3622, 183, 2, 32, "Output",ExpressionUUID->"ff874063-938b-4a20-9966-e8b5b9510b8b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[187865, 3630, 168, 3, 53, "Subsection",ExpressionUUID->"aadd733a-965c-40fd-adb6-853882f39b35"],
Cell[188036, 3635, 194, 3, 31, "ItemNumbered",ExpressionUUID->"37a4e07e-d7e7-4d11-9ffd-6b05d8c73cbf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188267, 3643, 157, 3, 53, "Subsection",ExpressionUUID->"607a8b68-c204-4e2c-a8e4-bd9c71427105"],
Cell[188427, 3648, 161, 3, 34, "Text",ExpressionUUID->"5cfb29bd-195e-4dbb-8cbf-5dcde9863859"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

